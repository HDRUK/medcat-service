name: Build and deploy to DEV
run-name: ${{ github.actor }} triggered deploy to DEV pipeline

on:
  push:
    branches:
      - 'GAT-3835'

env:
  PROJECT_ID: '${{ secrets.PROJECT_ID }}'
  GAR_LOCATION: '${{ secrets.GAR_LOCATION }}' 

jobs:
  build:
    permissions:
      contents: write
      id-token: write

    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: GAT-3835

      - name: Read BASE IMAGE VERSION file
        id: getappversion
        run: echo "appversion=$(sed -n 's/^MEDCAT_BASE_IMAGE_VERSION=\(.*\)/\1/p' < medcat_versions.yml)" >> $GITHUB_OUTPUT

      - name: Read MEDCAT VERSION
        id: getversion
        run: echo "version=$(sed -n 's/^MEDCAT_TAG=\(.*\)/\1/p' < medcat_versions.yml)" >> $GITHUB_OUTPUT

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v0'
        with:
          token_format: 'access_token'
          workload_identity_provider: '${{ secrets.WIF_PROVIDER }}' 
          service_account: '${{ secrets.WIF_SERVICE_ACCOUNT }}'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'
        with:
          version: '>= 363.0.0'

      - name: 'Use gcloud CLI to download the models from google storage bucket'
        run: sudo gsutil -m cp -r '${{ secrets.BUCKET_PATH }}' /mnt/

      - name: Login to GAR
        id: garlogin
        uses: docker/login-action@v2
        with:
          registry: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.PROJECT_ID }}
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}

      - name: Build and Push Container
        id: build
        shell: bash
        env: 
          GAR_LOCATION: ${{ secrets.GAR_LOCATION }}
          PROJECT_ID: ${{ secrets.PROJECT_ID }}
          GAR_NAME: ${{ secrets.GAR_NAME }}
          
        run: |
          df -h
          DOCKER_DATA_ROOT='/mnt/var/lib/docker'
          DOCKER_DAEMON_JSON='/etc/docker/daemon.json'
          sudo mkdir -p "${DOCKER_DATA_ROOT}"
          jq --arg dataroot "${DOCKER_DATA_ROOT}" '. + {"data-root": $dataroot}' "${DOCKER_DAEMON_JSON}" > "/tmp/docker.json.tmp"
          sudo mv "/tmp/docker.json.tmp" "${DOCKER_DAEMON_JSON}"
          sudo systemctl restart docker
          docker build -t '${{ env.GAR_LOCATION }}'-docker.pkg.dev/'${{ env.PROJECT_ID }}'/'${{ env.GAR_NAME }}'/${{ steps.getversion.outputs.version }}:${{ github.sha }} -t '${{ env.GAR_LOCATION }}'-docker.pkg.dev/'${{ env.PROJECT_ID }}'/'${{ env.GAR_NAME }}'/${{ steps.getversion.outputs.version }}:latest --build-arg MEDCAT_BASE_IMAGE_VERSION=${{ steps.getappversion.outputs.appversion }} ./
          docker push --all-tags '${{ env.GAR_LOCATION }}'-docker.pkg.dev/'${{ env.PROJECT_ID }}'/'${{ env.GAR_NAME }}'/${{ steps.getversion.outputs.version }}

  deploy:
    needs: build
    permissions:
      contents: write
      id-token: write

    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: GAT-3835

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v0'
        with:
          token_format: 'access_token'
          workload_identity_provider: '${{ secrets.WIF_PROVIDER }}' 
          service_account: '${{ secrets.WIF_SERVICE_ACCOUNT }}'

      - name: Read VERSION file
        id: getversion
        run: echo "version=$(sed -n 's/^MEDCAT_TAG=\(.*\)/\1/p' < medcat_versions.yml)" >> $GITHUB_OUTPUT
          
      - name: Deploy to Cloud Run
        uses: actions-hub/gcloud@master
        id: deploy
        env:
          PROJECT_ID: ${{ secrets.PROJECT_ID }}
          GAR_LOCATION: ${{ secrets.GAR_LOCATION }}
          GAR_NAME: ${{ secrets.GAR_NAME }}
          SERVICE_NAME: '${{ secrets.SERVICE_NAME }}'
          SERVICE_REGION: '${{ secrets.SERVICE_REGION }}'

        with:
          args: run services update '${{ env.SERVICE_NAME }}' --image='${{ env.GAR_LOCATION }}'-docker.pkg.dev/'${{ env.PROJECT_ID }}'/'${{ env.GAR_NAME }}'/${{ steps.getversion.outputs.version }}:${{ github.sha }} --region='${{ env.SERVICE_REGION }}' --project='${{ env.PROJECT_ID }}' 
